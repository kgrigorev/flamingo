// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	flamingo "flamingo.me/flamingo/v3/framework/flamingo"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: args
func (_m *Logger) Debug(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Debug(args ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(args ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(...interface{})) *Logger_Debug_Call {
	_c.Run(run)
	return _c
}

// Debugf provides a mock function with given fields: log, args
func (_m *Logger) Debugf(log string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, log)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Debugf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debugf'
type Logger_Debugf_Call struct {
	*mock.Call
}

// Debugf is a helper method to define mock.On call
//   - log string
//   - args ...interface{}
func (_e *Logger_Expecter) Debugf(log interface{}, args ...interface{}) *Logger_Debugf_Call {
	return &Logger_Debugf_Call{Call: _e.mock.On("Debugf",
		append([]interface{}{log}, args...)...)}
}

func (_c *Logger_Debugf_Call) Run(run func(log string, args ...interface{})) *Logger_Debugf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debugf_Call) Return() *Logger_Debugf_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debugf_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debugf_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: args
func (_m *Logger) Error(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Error(args ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Error_Call) Run(run func(args ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(...interface{})) *Logger_Error_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: args
func (_m *Logger) Fatal(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type Logger_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Fatal(args ...interface{}) *Logger_Fatal_Call {
	return &Logger_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Fatal_Call) Run(run func(args ...interface{})) *Logger_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Fatal_Call) Return() *Logger_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Fatal_Call) RunAndReturn(run func(...interface{})) *Logger_Fatal_Call {
	_c.Run(run)
	return _c
}

// Flush provides a mock function with no fields
func (_m *Logger) Flush() {
	_m.Called()
}

// Logger_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type Logger_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *Logger_Expecter) Flush() *Logger_Flush_Call {
	return &Logger_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *Logger_Flush_Call) Run(run func()) *Logger_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Flush_Call) Return() *Logger_Flush_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Flush_Call) RunAndReturn(run func()) *Logger_Flush_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function with given fields: args
func (_m *Logger) Info(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Info(args ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Info_Call) Run(run func(args ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(...interface{})) *Logger_Info_Call {
	_c.Run(run)
	return _c
}

// Panic provides a mock function with given fields: args
func (_m *Logger) Panic(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Panic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Panic'
type Logger_Panic_Call struct {
	*mock.Call
}

// Panic is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Panic(args ...interface{}) *Logger_Panic_Call {
	return &Logger_Panic_Call{Call: _e.mock.On("Panic",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Panic_Call) Run(run func(args ...interface{})) *Logger_Panic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Panic_Call) Return() *Logger_Panic_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Panic_Call) RunAndReturn(run func(...interface{})) *Logger_Panic_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function with given fields: args
func (_m *Logger) Warn(args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - args ...interface{}
func (_e *Logger_Expecter) Warn(args ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(args ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(...interface{})) *Logger_Warn_Call {
	_c.Run(run)
	return _c
}

// WithContext provides a mock function with given fields: ctx
func (_m *Logger) WithContext(ctx context.Context) flamingo.Logger {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WithContext")
	}

	var r0 flamingo.Logger
	if rf, ok := ret.Get(0).(func(context.Context) flamingo.Logger); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flamingo.Logger)
		}
	}

	return r0
}

// Logger_WithContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithContext'
type Logger_WithContext_Call struct {
	*mock.Call
}

// WithContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Logger_Expecter) WithContext(ctx interface{}) *Logger_WithContext_Call {
	return &Logger_WithContext_Call{Call: _e.mock.On("WithContext", ctx)}
}

func (_c *Logger_WithContext_Call) Run(run func(ctx context.Context)) *Logger_WithContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Logger_WithContext_Call) Return(_a0 flamingo.Logger) *Logger_WithContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithContext_Call) RunAndReturn(run func(context.Context) flamingo.Logger) *Logger_WithContext_Call {
	_c.Call.Return(run)
	return _c
}

// WithField provides a mock function with given fields: key, value
func (_m *Logger) WithField(key flamingo.LogKey, value interface{}) flamingo.Logger {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for WithField")
	}

	var r0 flamingo.Logger
	if rf, ok := ret.Get(0).(func(flamingo.LogKey, interface{}) flamingo.Logger); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flamingo.Logger)
		}
	}

	return r0
}

// Logger_WithField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithField'
type Logger_WithField_Call struct {
	*mock.Call
}

// WithField is a helper method to define mock.On call
//   - key flamingo.LogKey
//   - value interface{}
func (_e *Logger_Expecter) WithField(key interface{}, value interface{}) *Logger_WithField_Call {
	return &Logger_WithField_Call{Call: _e.mock.On("WithField", key, value)}
}

func (_c *Logger_WithField_Call) Run(run func(key flamingo.LogKey, value interface{})) *Logger_WithField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(flamingo.LogKey), args[1].(interface{}))
	})
	return _c
}

func (_c *Logger_WithField_Call) Return(_a0 flamingo.Logger) *Logger_WithField_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithField_Call) RunAndReturn(run func(flamingo.LogKey, interface{}) flamingo.Logger) *Logger_WithField_Call {
	_c.Call.Return(run)
	return _c
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields map[flamingo.LogKey]interface{}) flamingo.Logger {
	ret := _m.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 flamingo.Logger
	if rf, ok := ret.Get(0).(func(map[flamingo.LogKey]interface{}) flamingo.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flamingo.Logger)
		}
	}

	return r0
}

// Logger_WithFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithFields'
type Logger_WithFields_Call struct {
	*mock.Call
}

// WithFields is a helper method to define mock.On call
//   - fields map[flamingo.LogKey]interface{}
func (_e *Logger_Expecter) WithFields(fields interface{}) *Logger_WithFields_Call {
	return &Logger_WithFields_Call{Call: _e.mock.On("WithFields", fields)}
}

func (_c *Logger_WithFields_Call) Run(run func(fields map[flamingo.LogKey]interface{})) *Logger_WithFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[flamingo.LogKey]interface{}))
	})
	return _c
}

func (_c *Logger_WithFields_Call) Return(_a0 flamingo.Logger) *Logger_WithFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_WithFields_Call) RunAndReturn(run func(map[flamingo.LogKey]interface{}) flamingo.Logger) *Logger_WithFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
